


    ////    Run some asserts.

var assert  = require ( "assert" ),

    geom    = require ( "./lib/geom.js" ),
    quad    = require ( "./lib/shapequadtree.js" ),

    Index   = quad.Index,
    Node    = quad.Node,
    Shape   = quad.Shape,

    lineIntersect = geom.lineIntersect,
    polyTest = geom.polyTest,
    aabbTest = geom.aabbTest;


assert.deepEqual ( lineIntersect ( 0, 0, 1, 1, 0, 1, 1, 0, true, true, true ), [ 0.5, 0.5 ] );
assert.strictEqual ( lineIntersect ( 0, 0, 0, 1, 1, 1, 1, 0 ), 0 );
assert.strictEqual ( polyTest ( [ 0, 0, 0, 1, 1, 1, 1, 0 ], 0, 0.5, 0.5 ), 1 );
assert.strictEqual ( polyTest ( [ 0, 0, 0, 1, 1, 1, 1, 0 ], -0.25, 1.5, 1.5 ), 0 );
assert.strictEqual ( polyTest ( [ 0, 0, 0, 1, 1, 1, 1, 0 ], -0.25, 0, 1 ), 1 );
assert.strictEqual ( aabbTest ( 0, 0, 1, 1, 0.5, 0.5, 1.5, 1.5 ), 1 );
assert.strictEqual ( aabbTest ( 0, 0, 1, 1, 0.5, 1.5, 1.5, 2.5 ), 0 );
assert.strictEqual ( aabbTest ( 0, 0, 1, 1, 1.5, 0.5, 2.5, 1.5 ), 0 );

assert.strictEqual ( polyTest ( [ -180, -90, 180, -90, 180, 90, -180, 90 ], -180, -57.486412, -63.617287 ), 1 );

assert.strictEqual
(
    polyTest
    (
        [
            -57.486412, -63.617287,
            -57.477615, -63.616085,
            -57.459282, -63.616043,
            -57.443058, -63.617043,
            -57.431293, -63.618145,
            -57.418911, -63.620628,
            -57.4095, -63.624371,
            -57.404175, -63.627621,
            -57.403927, -63.633183,
            -57.406532, -63.637421,
            -57.411247, -63.639126,
            -57.41745, -63.643253,
            -57.421047, -63.646721,
            -57.424522, -63.65118,
            -57.423912, -63.656136,
            -57.427639, -63.662189,
            -57.434589, -63.663948,
            -57.446884, -63.669617,
            -57.459061, -63.676273,
            -57.465782, -63.683594,
            -57.480064, -63.684135,
            -57.490612, -63.682201,
            -57.502647, -63.679108,
            -57.515057, -63.67662,
            -57.524467, -63.672867,
            -57.529041, -63.6684,
            -57.540176, -63.661507,
            -57.547707, -63.654724,
            -57.558712, -63.648819,
            -57.567104, -63.642258,
            -57.576244, -63.636902,
            -57.575726, -63.633709,
            -57.578918, -63.62941,
            -57.57692, -63.627377,
            -57.56823, -63.625187,
            -57.554092, -63.623665,
            -57.547024, -63.622902,
            -57.540077, -63.621147,
            -57.535355, -63.619446,
            -57.528034, -63.617085,
            -57.520218, -63.615112,
            -57.514027, -63.614567,
            -57.501278, -63.616451,
            -57.486412, -63.617287
        ],
        -57,
        -57.5, -63.67
    ),

    1
);

assert.strictEqual
(
    new Shape
    ([
        92.418587, -65.67247,
        92.52404, -65.672287,
        92.61087, -65.702141,
        92.705223, -65.728134,
        92.719513, -65.744766,
        92.687279, -65.78157,
        92.667084, -65.789764,
        92.638817, -65.795959,
        92.62796, -65.798332,
        92.599129, -65.79982,
        92.596123, -65.799469,
        92.565193, -65.795914,
        92.490341, -65.796158,
        92.423561, -65.796341,
        92.377411, -65.792618,
        92.346603, -65.786324,
        92.286797, -65.737999,
        92.289101, -65.728355,
        92.297768, -65.715851,
        92.326576, -65.69429,
        92.358391, -65.68045,
        92.418587, -65.67247
    ])
    .intersects ( new Node ( -180, -90, 180, 90 ) ),

    true
);

assert.strictEqual
(
    new Shape
    ([
        92.418587, -65.67247,
        92.52404, -65.672287,
        92.61087, -65.702141,
        92.705223, -65.728134,
        92.719513, -65.744766,
        92.687279, -65.78157,
        92.667084, -65.789764,
        92.638817, -65.795959,
        92.62796, -65.798332,
        92.599129, -65.79982,
        92.596123, -65.799469,
        92.565193, -65.795914,
        92.490341, -65.796158,
        92.423561, -65.796341,
        92.377411, -65.792618,
        92.346603, -65.786324,
        92.286797, -65.737999,
        92.289101, -65.728355,
        92.297768, -65.715851,
        92.326576, -65.69429,
        92.358391, -65.68045,
        92.418587, -65.67247
    ])
    .intersects ( new Node ( -90, -180, 90, 180 ) ),

    false
);

assert.strictEqual ( polyTest ( [ 3, 3, 3, 50, 50, 50, 50, 3 ], 3, 4, 5 ), 1 );

( function ()
{
        ////    The tree will end up with 1 master node and 4 children.

    var index = new quad.Index ( -100, -100, 100, 100, 1, 100 );

        ////    Some stuff we ignore.

    index.insert ( [ -5, -5 ], "Some other point." );
    index.insert ( [ -25, -25, -50, -50 ], "Some other line." );
    index.insert ( [ -25, -25, -50, -50, -25, -50 ], "Some other triangle." );

        ////    The stuff we actually care about.

    assert.strictEqual ( index.insert ( [ 4, 5 ], "A" ), 1 );
    assert.strictEqual ( index.insert ( [ -25, 75, 75, -25 ], "B" ), 3 );
    assert.strictEqual ( index.insert ( [ -10, 25, -10, 50, 20, 50 ], "C" ), 2 );
    assert.strictEqual ( index.insert ( [ 10, 10, 10, 20, 20, 20, 20, 10 ], "D" ), 1 );

        ////    Query and process a bit for testing.

    var matches = index.query ( [ 3, 3, 3, 50, 50, 50, 50, 3 ] ).map ( function ( entry )
    {
        return entry.geom.length + '-' + entry.data;
    });

    matches.sort ();
    assert.strictEqual ( matches.join ( ',' ), '2-A,4-B,6-C,8-D' );
}
() );

console.log ( "Tests pass." );

